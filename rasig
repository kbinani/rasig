#!/usr/bin/env ruby
# coding: utf-8

require 'net/irc'
require 'net/http'
require 'net/https'
require 'json'
require 'date'
require_relative 'lib/as/client.rb'
require_relative 'lib/as/room_connection.rb'

class AsIrcGateway < Net::IRC::Server::Session
  class StaticSetting
    VERSION         = "0.0.2"
    RECENT_INFO_URL = "https://raw.github.com/kbinani/rasig/master/recent.json"
    NAME            = "rasig"
  end

  class Version
    attr_reader :major, :minor, :release

    def initialize(string)
      major, minor, release, trash = string.split(".", 4)
      @major = major.to_i
      @minor = minor.to_i
      @release = release.to_i
    end

    def equal_to?(other)
      @major == other.major and @minor == other.minor and @release == other.release
    end

    def greater_than?(other)
      if @major == other.major then
        if @minor == other.minor then
          @release > other.release
        else
          @minor > @other.minor
        end
      else
        @major > other.major
      end
    end

    def to_string
      @major.to_s + "." + @minor.to_s + "." + @release.to_s
    end
  end

  def encoding
    "utf-8"
  end

  def server_name
    "as-irc-gateway"
  end

  def server_version
    StaticSetting::VERSION
  end

  def post_message(channel, screen_name, name, message, message_id)
    # irc client からの発言が重複して再ポストされるのを防ぐため、
    # message_id と @last_post_message_id が等しくないもののみ post する。
    @last_post_message_id ||= []
    if @last_post_message_id.include?(message_id) then
      @last_post_message_id.delete(message_id)
    else
      connection = @connections[channel]
      if not connection.user_exists?(name) then
        post name, JOIN, "#" + channel
        connection.user_add(name)
      end
      post name, PRIVMSG, "#" + channel, message
    end
  end

  def get_room_name(room_name_or_id)
    room_name = room_name_or_id
    if room_name.start_with?("#") then
      room_name = room_name[1...room_name.length]
    end
    if not @client.channel_exists?(room_name) then
      room_name = @client.get_room_name_by_id(room_name)
    end
    room_name
  end

  def join_to(room_name_or_id)
    room_name = get_room_name(room_name_or_id)
    if @client.channel_exists?(room_name) then
      room_name = @client.sanitize_room_name(room_name)
      post @name, JOIN, "#" + room_name
      @connections ||= {}
      if not @connections.has_key?(room_name) then
        @connections[room_name] = As::RoomConnection.new(@client, room_name, self, @opts.pollinginterval)
      end
      post nil, RPL_NAMREPLY, @prefix.nick, "=", room_name, "@#{@prefix.nick}"
      post nil, RPL_ENDOFNAMES, @prefix.nick, room_name, "End of NAMES list"
    else
      post @name, ERR_NOSUCHCHANNEL, room_name_or_id, "No such channel"
    end
  end

  def part_from(room_name_or_id)
    room_name = get_room_name(room_name_or_id)
    if (not @connections.nil?) and @connections.has_key?(room_name) then
      connection = @connections[room_name]
      @connections.delete room_name
      post @prefix, PART, "#" + room_name
      connection.part
    end
  end

  def check_for_updates
    Thread.new {
      uri = URI(StaticSetting::RECENT_INFO_URL)
      body = nil
      begin
        http = Net::HTTP.new(uri.host, uri.port)
        if uri.instance_of?(URI::HTTPS) then
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE
        end
        response = nil
        http.start {
          response = http.get(uri.path)
        }
        body = response.body
      rescue => e
        p e
      end
      if not body.nil? then
        result = JSON.parse(body)
        recent_version = Version.new(result["version"])
        using_version = Version.new(server_version)
        if recent_version.greater_than?(using_version) then
          post nil, PRIVMSG, @prefix.nick, @prefix.nick + ": Newer version available: " + StaticSetting::NAME + " version " + recent_version.to_string
        end
      end
    }
  end

  def on_list(message)
    post(nil, RPL_LISTSTART, @prefix.nick, "")
    @client.room_list.each { |room|
      room_name = @client.sanitize_room_name(room["name"])
      room_name.force_encoding(encoding)
      post(nil, RPL_LIST, @prefix.nick, room_name)
    }
    post(nil, RPL_LISTEND, @prefix.nick, "End of LIST list")
  end

  def on_message(message)
    case message.command
    when LIST
      on_list(message)
    end
  end

  def on_privmsg(message)
    super
    channel = message.params[0]
    channel = channel[1...channel.length] if channel.start_with?("#")
    channel.force_encoding(encoding)
    text = message.params[1]
    text.force_encoding(encoding)
    connection = @connections[channel]
    if not connection.nil? then
      @last_post_message_id ||= []
      message_id = connection.post_message(text)
      @last_post_message_id << message_id
    end
  end

  def on_join(message)
    super
    channel_list = message.params[0]
    channel_list.force_encoding(encoding)
    channel_list.split(",").each { |room_name_or_id|
      if not room_name_or_id.nil? then
        join_to(room_name_or_id)
      end
    }
  end

  def on_user(message)
    super
    @name = message.params[0]
    @name.force_encoding(encoding)
    realname = message.params[3]
    realname.force_encoding(encoding)
    @as_api_key = nil
    @as_host = nil
    realname.split(" ").map { |param|
      param.split("=", 2)
    }.select { |param|
      param.length == 2
    }.map { |param|
      [param[0], param[1]]
    }.each { |key, value|
      case key
      when "api_key"
        @as_api_key = value
      when "host"
        @as_host = value
      end
    }
    if @as_api_key.nil? or @as_host.nil? then
      post nil, PRIVMSG, @prefix.nick, "API key or API URL of AsakusaSatellite is not specified."
      post nil, PRIVMSG, @prefix.nick, "Set your realname on your IRC client like this:"
      post nil, PRIVMSG, @prefix.nick, "  api_key=01234567890abcdefghijklm host=http://example.com:3000"
      @as_api_key = nil
      @as_host = nil
    else
      @client = As::Client.new(@as_host, @as_api_key)
      check_for_updates
    end
  end

  def on_part(message)
    super
    channel_list = message.params[0]
    channel_list.force_encoding(encoding)
    channel_list.split(",").each { |room_name_or_id|
      part_from(room_name_or_id)
    }
  end

  def on_disconnected
    if not @connections.nil? then
      @connections.each { |name, connection|
        connection.part
      }
    end
    @client = nil
    @name = nil
    @as_api_key = nil
    @as_host = nil
  end
end

if __FILE__ == $0
  require "optparse"
  opts = {
    :port => 16668,
    :host => "127.0.0.1",
    :log => nil,
    :debug => false,
    :foreground => false,
    :pollinginterval => 10,
  }

  OptionParser.new { |parser|
    parser.instance_eval {
      self.banner  = <<-EOB.gsub(/^\t+/, "")
Usage: #{$0} [opts]
EOB

      separator ""

      separator "Options:"
      on("-p", "--port [PORT=#{opts[:port]}]", "port number to listen") { |port|
        opts[:port] = port
      }
      on("-h", "--host [HOST=#{opts[:host]}]", "host name or IP address to listen") { |host|
        opts[:host] = host
      }
      on("-l", "--log LOG", "log file") { |log|
        opts[:log] = log
      }
      on("--debug", "Enable debug mode") { |debug|
        opts[:log] = $stdout
        opts[:debug] = true
      }
      on("-f", "--foreground", "run foreground") { |foreground|
        opts[:log] = $stdout
        opts[:foreground] = true
      }
      on("--pollinginterval [INTERVAL=#{opts[:pollinginterval]}]", "polling interval in seconds") { |pollinginterval|
        begin
          opts[:pollinginterval] = Integer(pollinginterval)
        rescue
          puts "Error: argument of --pollinginterval option must be integer"
        end
        if opts[:pollinginterval] <= 0 then
          puts "Error: argument of --pollinginterval option must be larger or equal to 0"
          opts[:pollinginterval] = 10
        end
      }
      parse!(ARGV)
    }
  }

  opts[:logger] = Logger.new(opts[:log], "daily")
  opts[:logger].level = opts[:debug] ? Logger::DEBUG : Logger::INFO
  opts[:logger].level = Logger::INFO

  Net::IRC::Server.new(opts[:host], opts[:port], AsIrcGateway, opts).start
end
